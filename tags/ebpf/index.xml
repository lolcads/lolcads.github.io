<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>EBPF on lolcads tech blog</title><link>https://lolcads.github.io/tags/ebpf/</link><description>Recent content in EBPF on lolcads tech blog</description><generator>Hugo</generator><language>en</language><managingEditor>user@example.com (Hugo Author)</managingEditor><webMaster>user@example.com (Hugo Author)</webMaster><copyright>lolcads</copyright><lastBuildDate>Thu, 21 Dec 2023 13:47:46 +0100</lastBuildDate><atom:link href="https://lolcads.github.io/tags/ebpf/index.xml" rel="self" type="application/rss+xml"/><item><title>BPF Memory Forensics with Volatility 3</title><link>https://lolcads.github.io/posts/2023/12/bpf_memory_forensics_with_volatility3/</link><pubDate>Thu, 21 Dec 2023 13:47:46 +0100</pubDate><author>user@example.com (Hugo Author)</author><guid>https://lolcads.github.io/posts/2023/12/bpf_memory_forensics_with_volatility3/</guid><description>BPF Memory Forensics with Volatility 3 Introduction and Motivation Have you ever wondered how an eBPF rootkit looks like? Well, here&amp;rsquo;s one, have a good look:
Upon receiving a command and control (C2) request, this specimen can execute arbitrary commands on the infected machine, exfiltrate sensitive files, perform passive and active network discovery scans (like nmap), or provide a privilege escalation backdoor to a local shell. Of course, it&amp;rsquo;s also trying its best to hide itself from system administrators hunting it with different command line tools such as ps, lsof, tcpdump an others or even try tools like rkhunter or chkrootkit.</description></item></channel></rss>