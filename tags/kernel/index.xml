<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kernel on lolcads tech blog</title><link>https://lolcads.github.io/tags/kernel/</link><description>Recent content in Kernel on lolcads tech blog</description><generator>Hugo</generator><language>en</language><managingEditor>lolcads@posteo.net (lolcads)</managingEditor><webMaster>lolcads@posteo.net (lolcads)</webMaster><copyright>lolcads</copyright><lastBuildDate>Wed, 13 Nov 2024 12:38:49 +0100</lastBuildDate><atom:link href="https://lolcads.github.io/tags/kernel/index.xml" rel="self" type="application/rss+xml"/><item><title>Towards utilizing BTF Information in Linux Memory Forensics</title><link>https://lolcads.github.io/posts/2024/11/btf2json/</link><pubDate>Wed, 13 Nov 2024 12:38:49 +0100</pubDate><author>lolcads@posteo.net (lolcads)</author><guid>https://lolcads.github.io/posts/2024/11/btf2json/</guid><description>&lt;p>This post is about some work that I did on automatic profile generation for memory forensics of Linux systems. To be upfront about it: This work is somewhat half-finished &amp;ndash; it already does something quite useful, but it could do a lot more, and it has not been evaluated thoroughly enough to be considered &amp;ldquo;production ready&amp;rdquo;. The reason I decided to publish it anyway is that I believe that there is an interesting opportunity to change the way in which we generate profiles for the analysis of Linux memory images &lt;em>in practice&lt;/em>. However, in order for it to become a production tool, at least one outstanding problem has to be addressed (I have some ideas on that one) and lots of coding work needs to be done &amp;ndash; and I simply do not have the resources to work on that right now.&lt;/p></description></item><item><title>BPF Memory Forensics with Volatility 3</title><link>https://lolcads.github.io/posts/2023/12/bpf_memory_forensics_with_volatility3/</link><pubDate>Thu, 21 Dec 2023 13:47:46 +0100</pubDate><author>lolcads@posteo.net (lolcads)</author><guid>https://lolcads.github.io/posts/2023/12/bpf_memory_forensics_with_volatility3/</guid><description>&lt;h1 id="bpf-memory-forensics-with-volatility-3">BPF Memory Forensics with Volatility 3&lt;/h1>
&lt;h2 id="introduction-and-motivation">Introduction and Motivation&lt;/h2>
&lt;p>Have you ever wondered how an eBPF rootkit looks like? Well, here&amp;rsquo;s one, have a good look:&lt;/p>
&lt;p>&lt;div class="not-prose">
&lt;figure>
 &lt;img src="https://lolcads.github.io/2023/12/ubuntu-20.04-LTS-focal-ebpfkit.png"
 alt="ubuntu-20.04-LTS-focal-ebpfkit.png" 
 loading="lazy"
 >
 &lt;/figure>&lt;/div>
&lt;/p>
&lt;p>Upon receiving a command and control (C2) request, this specimen can execute arbitrary commands on the infected machine, exfiltrate sensitive files, perform passive and active network discovery scans (like &lt;code>nmap&lt;/code>), or provide a privilege escalation backdoor to a local shell. Of course, it&amp;rsquo;s also trying its best to hide itself from system administrators hunting it with different command line tools such as &lt;code>ps&lt;/code>, &lt;code>lsof&lt;/code>, &lt;code>tcpdump&lt;/code> an others or even try tools like &lt;code>rkhunter&lt;/code> or &lt;code>chkrootkit&lt;/code>.&lt;/p></description></item><item><title>Exploration of the Dirty Pipe Vulnerability (CVE-2022-0847)</title><link>https://lolcads.github.io/posts/2022/06/dirty_pipe_cve_2022_0847/</link><pubDate>Mon, 06 Jun 2022 19:57:03 +0200</pubDate><author>lolcads@posteo.net (lolcads)</author><guid>https://lolcads.github.io/posts/2022/06/dirty_pipe_cve_2022_0847/</guid><description>&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>This blog post reflects our exploration of the Dirty Pipe Vulnerability in the Linux kernel. The bug was discovered by Max Kellermann and described &lt;a href="https://dirtypipe.cm4all.com/" target="_blank" rel="noopener">here&lt;/a>
. If you haven&amp;rsquo;t read the original publication yet, we&amp;rsquo;d suggest that you read it first (maybe also twice ;)). While Kellermann&amp;rsquo;s post is a great resource that contains all the relevant information to understand the bug, it assumes some familiarity with the Linux kernel. To fully understand what&amp;rsquo;s going on we&amp;rsquo;d like to shed some light on specific kernel internals. The aim of this post is to share our knowledge and to provide a resource for other interested individuals. The idea of this post is as follows: We take a small proof-of-concept (PoC) program and divide it into several stages. Each stage issues a system call (or syscall for short), and we will look inside the kernel to understand which actions and state changes occur in response to those calls. For this we use both, the kernel source code (&lt;a href="https://elixir.bootlin.com/linux/v5.17.9/source" target="_blank" rel="noopener">elixir.bootlin.com&lt;/a>
, version 5.17.9) and a kernel debugging setup (derived from &lt;a href="https://github.com/martinclauss/linux-kernel-debugging" target="_blank" rel="noopener">linux-kernel-debugging&lt;/a>
). The Dirty Pipe-specific debugging setup and the PoC code is provided in a &lt;a href="https://github.com/vobst/lkd-cve" target="_blank" rel="noopener">GitHub&lt;/a>
 repository.&lt;/p></description></item><item><title>Exploiting CVE-2021-43247</title><link>https://lolcads.github.io/posts/2022/06/exploiting_cve_2021_43247/</link><pubDate>Thu, 02 Jun 2022 10:59:55 +0200</pubDate><author>lolcads@posteo.net (lolcads)</author><guid>https://lolcads.github.io/posts/2022/06/exploiting_cve_2021_43247/</guid><description>&lt;p>In this blog post I will go in depth into the inner workings of &lt;a href="https://nvd.nist.gov/vuln/detail/CVE-2021-43247" target="_blank" rel="noopener">CVE-2021-43247&lt;/a>
, which was fixed on the 14th of December 2021.
This bug was classified as &amp;ldquo;Windows TCP/IP Driver Elevation of Privilege Vulnerability&amp;rdquo;.
The vulnerability itself was probably dormant for a long time, but became exploitable when the &lt;code>AF_UNIX&lt;/code> address family
was first introduced in 2019.&lt;/p>
&lt;p>I will also take this as an excuse to explain in detail, what drivers are, how user space communicates with drivers,
what a Local Privilege Escalation (LPE) is and what how we can achieve it in this case.&lt;/p></description></item></channel></rss>