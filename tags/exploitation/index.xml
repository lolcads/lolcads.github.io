<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Exploitation on lolcads tech blog</title><link>https://lolcads.github.io/tags/exploitation/</link><description>Recent content in Exploitation on lolcads tech blog</description><generator>Hugo</generator><language>en</language><managingEditor>lolcads@posteo.net (lolcads)</managingEditor><webMaster>lolcads@posteo.net (lolcads)</webMaster><copyright>lolcads</copyright><lastBuildDate>Tue, 10 Sep 2024 09:25:28 +0200</lastBuildDate><atom:link href="https://lolcads.github.io/tags/exploitation/index.xml" rel="self" type="application/rss+xml"/><item><title>Bytecode Reuse Attack (Part 4)</title><link>https://lolcads.github.io/posts/2024/09/bytecode_exploitation_3/</link><pubDate>Tue, 10 Sep 2024 09:25:28 +0200</pubDate><author>lolcads@posteo.net (lolcads)</author><guid>https://lolcads.github.io/posts/2024/09/bytecode_exploitation_3/</guid><description>&lt;h1 id="bytecode-reuse-attack-part-4">Bytecode Reuse Attack (Part 4)&lt;/h1>
&lt;p>As last blog post on bytecode - based exploitation on Android, the next step following bytecode injection is discussed, namely: &lt;em>bytecode reuse&lt;/em>.&lt;/p>
&lt;p>To answer the question about &lt;em>why&lt;/em> an attacker needs bytecode reuse, although there already is bytecode injection, remember the &lt;em>arms race&lt;/em> in (binary) exploitation. In a nutshell, a new exploitation technique triggers a reaction in form of at least one security mechanism that (partially) mitigates the new technique. If only bytecode injection was researched, then the best response would be the development of a new security mechanism that prevents &lt;code>nterp&lt;/code> from executing arbitrary data. In other words, &lt;code>nterp&lt;/code> would be restricted to &lt;em>executable code&lt;/em>, i.e. bytecode. To be honest, every developer would respond with such a fix, myself included! However, bytecode injection is not the full potential of bytecode - based exploitation.&lt;/p></description></item><item><title>Bytecode Injection (Part 3)</title><link>https://lolcads.github.io/posts/2024/09/bytecode_exploitation_2/</link><pubDate>Tue, 10 Sep 2024 09:20:53 +0200</pubDate><author>lolcads@posteo.net (lolcads)</author><guid>https://lolcads.github.io/posts/2024/09/bytecode_exploitation_2/</guid><description>&lt;h1 id="bytecode-injection-part-3">Bytecode Injection (Part 3)&lt;/h1>
&lt;p>With all the basics out of the way, this blog post shows the first bytecode - based exploitation technique on Android: &lt;em>bytecode injection&lt;/em>! This opens the door to many interesting exploits, where injected bytecode can function as a one - in - all solution or an intermediate stage.&lt;/p>
&lt;p>In order to fully understand this technique, it is recommended to read the introductory blog posts first! As of writing, there is no public information on this topic except for the Android source code.&lt;/p></description></item><item><title>Fundamentals for Bytecode Exploitation (Part 2)</title><link>https://lolcads.github.io/posts/2024/09/bytecode_exploitation_1/</link><pubDate>Tue, 10 Sep 2024 09:17:43 +0200</pubDate><author>lolcads@posteo.net (lolcads)</author><guid>https://lolcads.github.io/posts/2024/09/bytecode_exploitation_1/</guid><description>&lt;h1 id="fundamentals-for-bytecode-exploitation-part-2">Fundamentals for Bytecode Exploitation (Part 2)&lt;/h1>
&lt;p>Exploiting a vulnerability always requires a certain knowledge about the operating system, including how processes are launched, what libraries are used and how control - flow &amp;ldquo;works&amp;rdquo;. While the latter could be considered coming from the architecture, this is not always the case on Android, because the &lt;em>Android RunTime&lt;/em> (ART) provides ways to call bytecode methods and redirect bytecode control - flow. Hence, ART dictates how bytecode control - flow works, not directly the underlying CPU. Understanding the above mechanisms is the minimal requirement for understanding bytecode - based exploitation. Based on that, more sophisticated analysis techniques can be built specifically for Android bytecode, to make bytecode - based exploitation feasible.&lt;/p></description></item><item><title>Introduction to Android Bytecode Exploitation (Part 1)</title><link>https://lolcads.github.io/posts/2024/09/bytecode_exploitation_0/</link><pubDate>Tue, 10 Sep 2024 09:11:56 +0200</pubDate><author>lolcads@posteo.net (lolcads)</author><guid>https://lolcads.github.io/posts/2024/09/bytecode_exploitation_0/</guid><description>&lt;h1 id="introduction-to-android-bytecode-exploitation-part-1">Introduction to Android Bytecode Exploitation (Part 1)&lt;/h1>
&lt;p>Android resides among the most popular operating systems for mobile devices, which causes Android to also be among the most popular targets for exploitation. While Android is frequently updated to fix the latest CVEs, malicious actors already search for new vulnerabilities, as gaining control over millions of computationally powerful devices is very appealing. The market shares underpin that Android is by far the most lucrative platform for malicious actors targeting mobile platforms.&lt;/p></description></item></channel></rss>